name: Build Android and Upload to Pgyer

on:
  workflow_dispatch:
    inputs:
      version_name:
        description: '版本名称'
        required: false
        default: ''

jobs:
  build-android:
    name: 构建 Android APK
    runs-on: ubuntu-latest
    
    steps:
      # 检出代码
      - name: 检出仓库
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      # 缓存 Library 文件夹
      - name: 缓存 Unity Library
        uses: actions/cache@v3
        with:
          path: Library
          key: Library-Android-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-Android-
            Library-

      # 更新 Unity 版本信息
      - name: 更新 ProjectVersion.txt
        run: |
          cat > ProjectSettings/ProjectVersion.txt << EOF
          m_EditorVersion: 2022.3.17f1
          m_EditorVersionWithRevision: 2022.3.17f1 (4fc78088f837)
          EOF
          echo "✅ 已更新 Unity 版本信息:"
          cat ProjectSettings/ProjectVersion.txt

      # 构建 Android APK
      - name: 构建 Unity 项目 (Android)
        uses: game-ci/unity-builder@v4
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          targetPlatform: Android
          androidAppBundle: false
          androidKeystoreName: user.keystore
          androidKeystoreBase64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          androidKeystorePass: ${{ secrets.ANDROID_KEYSTORE_PASS }}
          androidKeyaliasName: ${{ secrets.ANDROID_KEYALIAS_NAME }}
          androidKeyaliasPass: ${{ secrets.ANDROID_KEYALIAS_PASS }}
          buildName: RA
          unityVersion: 2022.3.17

      # 上传到蒲公英
      - name: 上传到蒲公英
        run: |
          # 查找生成的 APK 文件
          APK_FILE=$(find build/Android -name "*.apk" | head -n 1)
          
          if [ -z "$APK_FILE" ]; then
            echo "错误: 未找到 APK 文件"
            exit 1
          fi
          
          echo "找到 APK 文件: $APK_FILE"
          
          # 设置版本描述
          VERSION_DESC="${{ github.event.inputs.version_name }}"
          if [ -z "$VERSION_DESC" ]; then
            VERSION_DESC="Android 版本 - 构建于 $(date '+%Y-%m-%d %H:%M:%S')\n提交: ${{ github.sha }}\n分支: ${{ github.ref_name }}"
          fi
          
          # 上传到蒲公英
          RESPONSE=$(curl -s -F "file=@${APK_FILE}" \
            -F "_api_key=${{ secrets.PGYER_API_KEY }}" \
            -F "buildInstallType=2" \
            -F "buildPassword=${{ secrets.PGYER_BUILD_PASSWORD }}" \
            -F "buildUpdateDescription=${VERSION_DESC}" \
            https://www.pgyer.com/apiv2/app/upload)
          
          echo "蒲公英响应: $RESPONSE"
          
          # 检查上传是否成功
          CODE=$(echo $RESPONSE | grep -o '"code":[0-9]*' | grep -o '[0-9]*')
          
          if [ "$CODE" = "0" ]; then
            BUILD_KEY=$(echo $RESPONSE | grep -o '"buildKey":"[^"]*"' | cut -d'"' -f4)
            echo "✅ 上传成功!"
            echo "📱 下载链接: https://www.pgyer.com/${BUILD_KEY}"
            echo "🔑 安装密码: ${{ secrets.PGYER_BUILD_PASSWORD }}"
          else
            MESSAGE=$(echo $RESPONSE | grep -o '"message":"[^"]*"' | cut -d'"' -f4)
            echo "❌ 上传失败: $MESSAGE"
            exit 1
          fi

      # 上传构建产物到 GitHub
      - name: 上传 APK 到 GitHub Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: Android-APK
          path: build/Android/*.apk

