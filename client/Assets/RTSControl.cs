//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/RTS_Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @RTSControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @RTSControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""RTS_Controls"",
    ""maps"": [
        {
            ""name"": ""Camera"",
            ""id"": ""be29bc10-349e-4e22-9cce-3c17f36f71d6"",
            ""actions"": [
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""704d51a8-81fa-4771-9640-5da657063b26"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""8c822339-d547-489c-8620-897bb6285585"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""87becc68-1d4c-4a88-a63c-43a6cc53383b"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f81eded9-14e9-4113-9527-e8c541028710"",
                    ""path"": ""<Pointer>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Create"",
            ""id"": ""010eb57d-d313-4854-9bae-9afe05397be9"",
            ""actions"": [
                {
                    ""name"": ""createUnit"",
                    ""type"": ""Button"",
                    ""id"": ""91257576-7f80-468b-be15-a365a495aa8b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ca0ccf62-e528-4da1-8ce5-31517e31c838"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""createUnit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""RTSControl"",
            ""bindingGroup"": ""RTSControl"",
            ""devices"": []
        }
    ]
}");
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_Pan = m_Camera.FindAction("Pan", throwIfNotFound: true);
        m_Camera_Zoom = m_Camera.FindAction("Zoom", throwIfNotFound: true);
        // Create
        m_Create = asset.FindActionMap("Create", throwIfNotFound: true);
        m_Create_createUnit = m_Create.FindAction("createUnit", throwIfNotFound: true);
    }

    ~@RTSControl()
    {
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, RTSControl.Camera.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Create.enabled, "This will cause a leak and performance issues, RTSControl.Create.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_Pan;
    private readonly InputAction m_Camera_Zoom;
    public struct CameraActions
    {
        private @RTSControl m_Wrapper;
        public CameraActions(@RTSControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @Pan => m_Wrapper.m_Camera_Pan;
        public InputAction @Zoom => m_Wrapper.m_Camera_Zoom;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @Pan.started += instance.OnPan;
            @Pan.performed += instance.OnPan;
            @Pan.canceled += instance.OnPan;
            @Zoom.started += instance.OnZoom;
            @Zoom.performed += instance.OnZoom;
            @Zoom.canceled += instance.OnZoom;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @Pan.started -= instance.OnPan;
            @Pan.performed -= instance.OnPan;
            @Pan.canceled -= instance.OnPan;
            @Zoom.started -= instance.OnZoom;
            @Zoom.performed -= instance.OnZoom;
            @Zoom.canceled -= instance.OnZoom;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);

    // Create
    private readonly InputActionMap m_Create;
    private List<ICreateActions> m_CreateActionsCallbackInterfaces = new List<ICreateActions>();
    private readonly InputAction m_Create_createUnit;
    public struct CreateActions
    {
        private @RTSControl m_Wrapper;
        public CreateActions(@RTSControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @createUnit => m_Wrapper.m_Create_createUnit;
        public InputActionMap Get() { return m_Wrapper.m_Create; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CreateActions set) { return set.Get(); }
        public void AddCallbacks(ICreateActions instance)
        {
            if (instance == null || m_Wrapper.m_CreateActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CreateActionsCallbackInterfaces.Add(instance);
            @createUnit.started += instance.OnCreateUnit;
            @createUnit.performed += instance.OnCreateUnit;
            @createUnit.canceled += instance.OnCreateUnit;
        }

        private void UnregisterCallbacks(ICreateActions instance)
        {
            @createUnit.started -= instance.OnCreateUnit;
            @createUnit.performed -= instance.OnCreateUnit;
            @createUnit.canceled -= instance.OnCreateUnit;
        }

        public void RemoveCallbacks(ICreateActions instance)
        {
            if (m_Wrapper.m_CreateActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICreateActions instance)
        {
            foreach (var item in m_Wrapper.m_CreateActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CreateActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CreateActions @Create => new CreateActions(this);
    private int m_RTSControlSchemeIndex = -1;
    public InputControlScheme RTSControlScheme
    {
        get
        {
            if (m_RTSControlSchemeIndex == -1) m_RTSControlSchemeIndex = asset.FindControlSchemeIndex("RTSControl");
            return asset.controlSchemes[m_RTSControlSchemeIndex];
        }
    }
    public interface ICameraActions
    {
        void OnPan(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
    }
    public interface ICreateActions
    {
        void OnCreateUnit(InputAction.CallbackContext context);
    }
}
